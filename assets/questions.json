[
  {
    "question": "What is the output of the following code?",
    "A": "Error",
    "B": "3",
    "C": "12",
    "D": "1",
    "Answer": "C",
    "Language": "Javascript",
    "Level": "Beginner",
    "Code": "function sum(a, b) { return a + b; }\n sum(1, '2');"
  },
  {
    "question": "What is the output of the following code?",
    "A": "1. java\n2. error",
    "B": "1. javascript\n2. Error",
    "C": "1. java\n2. javascript",
    "D": "1. java\n2. java",
    "Answer": "B",
    "Language": "Javascript",
    "Level": "Intermediate",
    "Code": "let lang = 'javascript';\n(function(){\n   let lang = 'java';\n})();\n\nconsole.log(lang); (1)\n\n(function(){\n   var lang2 = 'java';\n})();\n\nconsole.log(lang2); (2)"
  },
  {
    "question": "What is the output of the following code?",
    "A": "{ a: \"one\", b: \"two\", a: \"three\"}",
    "B": "{ a: \"one\", b: \"two\"}",
    "C": "{ a: \"three\", b: \"two\"}",
    "D": "Error",
    "Answer": "C",
    "Language": "Javascript",
    "Level": "Beginner",
    "Code": "const obj = { a: 'one', b: 'two', a: 'three' };\n console.log(obj);"
  },
  {
    "question": "What is the output of the following code?",
    "A": "0",
    "B": "1",
    "C": "Error",
    "D": null,
    "Answer": "A",
    "Language": "Javascript",
    "Level": "Intermediate",
    "Code": "(function immediateA(a) {\n  return (function immediateB(b) {\n    console.log(a); // What is logged?\n  })(1);\n})(0);"
  },
  {
    "question": "What is the output of the following code?",
    "A": "\"0 1 2\"",
    "B": "\"0 0 0\"",
    "C": "\"1 1 1\"",
    "D": "\"3 3 3\"",
    "Answer": "D",
    "Language": "Javascript",
    "Level": "Intermediate",
    "Code": "for (var i = 0; i < 3; i++) {\n  setTimeout(function log() {\n    console.log(i); // What is logged?\n  }, 1000);\n}"
  },
  {
    "question": "What is the output of the following code?",
    "A": "10 20",
    "B": "undefined undefined",
    "C": "20 20",
    "D": "undefined 20",
    "Answer": "D",
    "Language": "Javascript",
    "Level": "Intermediate",
    "Code": "var num = 10;\n(()=>{\n   console.log(num);\n   var num = 20;\n   console.log(num);\n})();"
  },
  {
    "question": "What is the output of the following code?",
    "A": "3",
    "B": "2",
    "C": "5",
    "D": "Error",
    "Answer": "C",
    "Language": "Javascript",
    "Level": "Intermediate",
    "Code": "var func = [];\nfor (var i = 0; i < 5; i++) {\n  func[i] = function() {\n    console.log(i);\n  };\n}\nfunc[3]();"
  },
  {
    "question": "What is the output of the following code?",
    "A": "10",
    "B": "30",
    "C": "40",
    "D": "3",
    "Answer": "C",
    "Language": "Javascript",
    "Level": "Intermediate",
    "Code": "const arrTest = [10, 20, 30, 40, 50][1, 3];\nconsole.log(arrTest);"
  },
  {
    "question": "Concerning the solid principle, which of these is odd?",
    "A": "Dependency Inversion Principle",
    "B": "Liskov Substitution Principle",
    "C": "Interface Segregation Principle",
    "D": "Single Command Principle",
    "Answer": "D",
    "Language": "General",
    "Level": "Intermediate",
    "Code": null
  },
  {
    "question": "Solid principles form a core philosophy for methodologies like ",
    "A": "Code Development",
    "B": "Design Development",
    "C": "Software Development",
    "D": "Agile Development",
    "Answer": "C",
    "Language": "General",
    "Level": "Intermediate",
    "Code": null
  },
  {
    "question": "In the single responsibility principle, the responsibility for a class is ",
    "A": "Defined",
    "B": "Double",
    "C": "Simple",
    "D": "Single",
    "Answer": "D",
    "Language": "General",
    "Level": "",
    "Code": null
  },
  {
    "question": "In open/close principles, the software entities are open for equestiontension but closed for",
    "A": "Corrections",
    "B": "Errors",
    "C": "Modifications",
    "D": "Development",
    "Answer": "C",
    "Language": "General",
    "Level": "Intermediate",
    "Code": null
  },
  {
    "question": "Solid principle is also called",
    "A": "Solid-oriented principle",
    "B": "Solid-based principle",
    "C": "Object-oriented principle",
    "D": "Object-based principle",
    "Answer": "C",
    "Language": "General",
    "Level": "Intermediate",
    "Code": null
  },
  {
    "question": "What will happen when you try to build and run this code snippet?",
    "A": "A syntax error occurs due to the line SpecialFunction()().",
    "B": "The message \"An Error occurred\" is displayed.",
    "C": "The message \"Invoked from an instance.\" is displayed. // the second \"()\" is equals to .invoke()\n",
    "D": "A compile error occurs. You cannot override the invoke() method.",
    "Answer": "C",
    "Language": "Kotlin",
    "Level": "Intermediate",
    "Code": "class SpecialFunction : () -> Unit {\n  override fun invoke() {\n    println(\"Invoked from an instance.\")\n  }\n}\nfun main() {\n  try { SpecialFunction()() }\n  catch (ex: Exception) { println(\"An error occurred\") }\n}"
  },
  {
    "question": "Which line converts the binaryStr, which contains only 0s and 1s, to an integer representing its decimal value?",
    "A": "val myInt = toInt(binaryStr)",
    "B": "val myInt = binaryStr.toInt(\"0b\")",
    "C": "val myInt = binaryStr.toInt()",
    "D": "val myInt = binaryStr.toInt(2)",
    "Answer": "D",
    "Language": "Kotlin",
    "Level": "Intermediate",
    "Code": "val binaryStr = \"00001111\"\n"
  },
  {
    "question": "How to tell the compiler that the method is a static method and can be used in Java code?",
    "A": "@JvmField",
    "B": "@JvmOverloads",
    "C": "@JvmStatic",
    "D": "All of the above",
    "Answer": "C",
    "Language": "Kotlin",
    "Level": "Intermediate",
    "Code": null
  },
  {
    "question": "You have written a function, sort(), that should accept only collections that implement the Comparable interface. How can you restrict the function?",
    "A": "Add <T -> Comparable<T>> between the fun keyword and the function name",
    "B": "Add Comparable<T> between the fun keyword and the function name",
    "C": "Add <T : Comparable<T>> between the fun keyword and the function name",
    "D": "Add <T where Comparable<T>> between the fun keyword and the function name",
    "Answer": "C",
    "Language": "Kotlin",
    "Level": "Intermediate",
    "Code": "fun sort(list: List<T>): List <T> {\n    return list.sorted()\n}"
  },
  {
    "question": "Which line of code shows how to create a finite sequence of the numbers 1 to 99 and then convert it into a list?",
    "A": "val lessThan99 = generateSequence(1){ if (it < 99) it + 1 else null }.toList().",
    "B": "val lessThan99 = generateSequence(0){ if (it < 99)}.toList().",
    "C": "val lessThan99 = generateSequence(1..9){ if (it < 99) it + 1 else null }.toList().",
    "D": "val lessThan99 = listOf{1..99}.asSequence().toList()\n",
    "Answer": "A",
    "Language": "Kotlin",
    "Level": "Intermediate",
    "Code": null
  },
  {
    "question": "What is the output of this code?",
    "A": "The length of the quote is The eagle has landed.",
    "B": "A compilation error is displayed.",
    "C": "The length of the quote is 21",
    "D": "The length of the quote is The eagle has landed..length",
    "Answer": "D",
    "Language": "Kotlin",
    "Level": "Intermediate",
    "Code": "val quote = \"The eagle has landed.\"\nprintln(\"The length of the quote is $quote.length\")"
  },
  {
    "question": "You have an unordered list of high scores. Which is the simple method to sort the highScores in descending order?",
    "A": ".sortedByDescending()",
    "B": ".descending()",
    "C": ".sortedDescending()",
    "D": ".sort(\"DESC\")",
    "Answer": "C",
    "Language": "Kotlin",
    "Level": "Intermediate",
    "Code": "fun main() {\n    val highScores = listOf(4000, 2000, 10200, 12000, 9030)"
  },
  {
    "question": "How to check if a lateinit variable has been initialized or not: lateinit var name: String ?",
    "A": "this::name != null",
    "B": "this::name.isInitialized()",
    "C": "this::name.isInitialized",
    "D": "this::name.length > 0",
    "Answer": "C",
    "Language": "Kotlin",
    "Level": "Beginner",
    "Code": null
  },
  {
    "question": "What are the ways through which we can create kotlin coroutines?",
    "A": "launch{} & async{}",
    "B": "await() & async{}",
    "C": "Both a and B",
    "D": "Non of the above.",
    "Answer": "A",
    "Language": "Kotlin",
    "Level": "Intermediate",
    "Code": null
  },
  {
    "question": "Which line of code shows how to call a Fibonacci function, bypass the first three elements, grab the next six, and sort the elements in descending order?",
    "A": "val sorted = fibonacci().skip(3).take(6).sortedDescending().toList()",
    "B": "val sorted = fibonacci().skip(3).take(6).sortedByDescending().toList()",
    "C": "val sorted = fibonacci().skip(3).limit(6).sortedByDescending().toList()",
    "D": "val sorted = fibonacci().drop(3).take(6).sortedDescending().toList()",
    "Answer": "D",
    "Language": "Kotlin",
    "Level": "Intermediate",
    "Code": null
  },
  {
    "question": "You have two arrays, a and b. Which line combines a and b as a list containing the contents of both?",
    "A": "val c = list of (a, b)",
    "B": "val c = a + b",
    "C": "val c = listOf(a+b)",
    "D": "val c = listOf(*a, *b)",
    "Answer": "D",
    "Language": "Kotlin",
    "Level": "Intermediate",
    "Code": "val a = arrayOf(1, 2, 3)\nval b = arrayOf(100, 200, 3000)"
  },
  {
    "question": "This code occasionally throws a null pointer exception (NPE). How can you change the code so it never throws as NPE?",
    "A": "Replace !!. with ?.",
    "B": "Replace !!. with ?:.",
    "C": "Surround the line with a try/catch block.",
    "D": "Replace !!. with ?.let",
    "Answer": "A",
    "Language": "Kotlin",
    "Level": "Intermediate",
    "Code": "println(\"length of First Name = ${firstName!!.length}\")"
  },
  {
    "question": "Which line of code is a shorter, more idiomatic version of the displayed snippet?\nval len: Int = if (question != null) question.length else -1",
    "A": "val len = question?.let{question.len} else {-1}",
    "B": "val len = question!!.length ?: -1",
    "C": "val len:Int = (question != null)? question.length : -1",
    "D": "val len = question?.length ?: -1",
    "Answer": "D",
    "Language": "Kotlin",
    "Level": "Intermediate",
    "Code": null
  },
  {
    "question": "Display even numbers from 1 to 10 with least amount of code in below for loop?\nfor (_____) {\n  println(\"There are $count employees.\")\n}",
    "A": "count in 1..10",
    "B": "count in 2..10 step 2",
    "C": "count in 1..10 % 2",
    "D": "var count=2; count <= 10; count+=2",
    "Answer": "B",
    "Language": "Kotlin",
    "Level": "Intermediate",
    "Code": null
  },
  {
    "question": "You have started a long-running coroutine whose job you have assigned to a variable named task. How could you abort this coroutine?\nval task = launch {\n  // long running job\n}",
    "A": "task.join()",
    "B": "task.abort()",
    "C": "task.stop()",
    "D": "task.cancel()",
    "Answer": "D",
    "Language": "Kotlin",
    "Level": "Intermediate",
    "Code": null
  },
  {
    "question": "What is the output of this code?",
    "A": "It will not compile because of line 4.",
    "B": "It will not compile because of line 3.",
    "C": "123",
    "D": "1234",
    "Answer": "A",
    "Language": "Java",
    "Level": "Intermediate",
    "Code": "class Main {\n  public static void main (String[] args) {\n    int array[] = {1, 2, 3, 4};\n    for (int i = 0; i < array.size(); i++) {\n       System.out.print(array[i]);\n    }\n  }\n}"
  },
  {
    "question": "What does the following code print?",
    "A": "CD",
    "B": "CDE",
    "C": "D",
    "D": "abcde",
    "Answer": "D",
    "Language": "Java",
    "Level": "Intermediate",
    "Code": "String str = \"abcde\";\nstr.trim();\nstr.toUpperCase();\nstr.substring(3, 4);\nSystem.out.println(str);"
  },
  {
    "question": "What is the result of this code?",
    "A": "It will show a stack trace with a runtime exception.",
    "B": "java.lang.Exception",
    "C": "It will run and throw an exception.",
    "D": "It will not compile.",
    "Answer": "B",
    "Language": "Java",
    "Level": "Intermediate",
    "Code": "class Main {\n    public static void main (String[] args){\n        System.out.println(print(1));\n    }\n    static Exception print(int i){\n        if (i>0) {\n            return new Exception();\n        } else {\n            throw new RuntimeException();\n        }\n    }\n}"
  },
  {
    "question": "What is the output of the following code?",
    "A": "-127",
    "B": "127",
    "C": "129",
    "D": "2",
    "Answer": "A",
    "Language": "Java",
    "Level": "Intermediate",
    "FIELD9": "Range of byte data in java is -128 to 127. But the byte data type in java is cyclic in nature",
    "Code": "public class Foo{\n       public static void main(String[] args){\n                     byte question = 127;\n                     question++;\n                     question++;\n                     System.out.print(question);\n       }\n}"
  },
  {
    "question": "Given this code, which command will output \"2\"?",
    "A": "java Main 1 2 \"3 4\" 5",
    "B": "java Main 1 \"2\" \"2\" 5",
    "C": "java Main.class 1 \"2\" 2 5",
    "D": "java Main 1 \"2\" \"3 4\" 5",
    "Answer": "B",
    "Language": "Java",
    "Level": "Intermediate",
    "Code": "class Main {\n    public static void main(String[] args) {\n        System.out.println(args[2]);\n    }\n}"
  },
  {
    "question": "Which code snippet is valid?",
    "A": "ArrayList<String> words = new ArrayList<String>(){\"Hello\", \"World\"};\n",
    "B": "ArrayList words = Arrays.asList(\"Hello\", \"World\");",
    "C": "ArrayList<String> words = {\"Hello\", \"World\"};",
    "D": "ArrayList<String> words = new ArrayList<>(Arrays.asList(\"Hello\", \"World\"));",
    "Answer": "D",
    "Language": "Java",
    "Level": "Intermediate",
    "Code": null
  },
  {
    "question": "What is the output of this code?",
    "A": "It will not compile.",
    "B": "\"Hello World!\"",
    "C": "\"hello\"",
    "D": "???? The code effectively converts the initial \"hello\" into \"HelloWorld!\" by deleting the first character, inserting \"H\" at the beginning, and appending \" World!\" to the end.",
    "Answer": "B",
    "Language": "Java",
    "Level": "Intermediate",
    "Code": "class Main {\n  public static void main(String[] args) {\n    StringBuilder sb = new StringBuilder(\"hello\");\n    sb.deleteCharAt(0).insert(0, \"H\").append(\" World!\");\n    System.out.println(sb);\n  }\n}"
  },
  {
    "question": "What is the output of the following code?",
    "A": "abc",
    "B": "bc",
    "C": "bcd",
    "D": "cd",
    "Answer": "B",
    "Language": "Java",
    "Level": "Beginner",
    "Code": "String str = “abcde”;\nSystem.out.println(str.substring(1, 3));"
  },
  {
    "question": "What is the output of the following code?",
    "A": "2",
    "B": "3",
    "C": "4",
    "D": "1",
    "Answer": "B",
    "Language": "Java",
    "Level": "Intermediate",
    "Code": "String a = new String(“gdgpune23”);\nString b = new String(“gdgpune23”);\nStrinc c = “gdgpune23”;\nString d = “gdgpune23”;"
  },
  {
    "question": "What is the output?",
    "A": "1 3 2 4",
    "B": "4 2 3 1",
    "C": "1 2 3 4",
    "D": "4 3 2 1",
    "Answer": "C",
    "Language": "Java",
    "Level": "Intermediate",
    "Code": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args)\n    {\n        PriorityQueue<Integer> queue = new PriorityQueue<>();\n        queue.add(4);\n        queue.add(3);\n        queue.add(2);\n        queue.add(1);\n\n        while (queue.isEmpty() == false) {\n            System.out.printf(\"%d\", queue.remove());\n        }\n    }\n}"
  },
  {
    "question": "Which class can compile given these declarations?\ninterface One {\n    default void method() {\n        System.out.println(\"One\");\n    }\n}\n\ninterface Two {\n    default void method () {\n        System.out.println(\"One\");\n    }\n}",
    "A": "class Three implements One, Two {\n\t    public void method() {\n\t        super.One.method();\n\t    }\n\t}",
    "B": "class Three implements One, Two {\n\t    public void method() {\n\t        One.method();\n\t    }\n\t}",
    "C": "class Three implements One, Two {\n\t}",
    "D": "class Three implements One, Two {\n\t    public void method() {\n\t        One.super.method();\n\t    }\n\t}",
    "Answer": "D",
    "Language": "Java",
    "Level": "Intermediate",
    "Code": null
  },
  {
    "question": "What is the output of the following code?",
    "A": "The code does not compile.",
    "B": "truefalse",
    "C": "truetrue",
    "D": "falsetrue",
    "Answer": "C",
    "Language": "Java",
    "Level": "Beginner",
    "Code": "class Main {\n    public static void main (String[] args) {\n        List list = new ArrayList();\n        list.add(\"hello\");\n        list.add(2);\n        System.out.print(list.get(0) instanceof Object);\n        System.out.print(list.get(1) instanceof Integer);\n    }\n}"
  },
  {
    "question": "What is the output of the following code?",
    "A": "It will not compile because of message() in main class.",
    "B": "\"Hello!\"",
    "C": "It will not compile because of message() in base class.",
    "D": "\"World!\"",
    "Answer": "A",
    "Language": "Java",
    "Level": "Intermediate",
    "Code": "class MainClass {\n    final String message() {\n        return \"Hello!\";\n    }\n}\n\nclass Main equestiontends MainClass {\n    public static void main(String[] args) {\n        System.out.println(message());\n    }\n\n     String message() {\n         return \"World!\";\n     }\n }"
  },
  {
    "question": "Given this code, which command will output?",
    "A": "java Main 1 2 \"3 4\" 5",
    "B": "java Main 1 \"2\" \"2\" 5",
    "C": "java Main.class 1 \"2\" 2 5",
    "D": "java Main 1 \"2\" \"3 4\" 5",
    "Answer": "B",
    "Language": "Java",
    "Level": "Beginner",
    "Code": "class Main {\n    public static void main(String[] args) {\n        System.out.println(args[2]);\n    }\n}"
  },
  {
    "question": "What is the output of the following code?",
    "A": "\"123451234512345\"",
    "B": "Nothing - this will not compile.",
    "C": "a negative integer value",
    "D": "\"12345100000\"",
    "Answer": "B",
    "Language": "Java",
    "Level": "Intermediate",
    "Code": "class Main {\n    public static void main(String[] args){\n        int a = 123451234512345;\n        System.out.println(a);\n    }}"
  }
]

